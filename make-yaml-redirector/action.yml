name: "Make YAML file"
author: "Igor Pecovnik"
description: "Make YAML for redirector"
inputs:
  variant:
    description: packages, images, ...
    required: true
  port:
    description: Repository
    required: true
  geodb:
    description: Repository
    required: true
  asndb:
    description: Repository
    required: true
  dl_map:
    description: Repository
    required: true
  netbox:  
    description: NetboxID
    required: true

runs:
  using: "composite"
  steps:

    - name: "Select repository"
      shell: bash
      run: |

          FILENAME=${{ inputs.variant }}
          PORT=${{ inputs.port }}
          echo "#" > dlrouter-${FILENAME}.yaml
          echo "# ${FILENAME}.armbian.com " >> dlrouter-${FILENAME}.yaml
          echo "#" >> dlrouter-${FILENAME}.yaml
          #toilet -f emboss ${FILENAME} | sed 's/^/# /' > dlrouter-${FILENAME}.yaml
          cat <<- EOF >> dlrouter-${FILENAME}.yaml
          geodb: ${{ inputs.geodb }}
          asndb: ${{ inputs.asndb }}
          dl_map: ${{ inputs.dl_map }}
          bind: ':${PORT}'
          
          # Reload authorization key
          reloadKey: NLnC4QNF862QumEpt7zwVPZAEvqAz6cZ
          
          # LRU Cache Size (in items)
          cacheSize: 2048
          
          # Server definition
          # Weights are just like nginx, where if it's > 1 it'll be chosen x out of x + total times
          # By default, the top 3 servers are used for choosing the best.
          # server = full url or host+path
          # weight = int
          # optional: latitude, longitude (float)
          
          servers:
          EOF
            echo "<pre>" >> $GITHUB_STEP_SUMMARY
            SERVERS=($(curl -sH "Authorization: Token ${{ inputs.netbox }}" -H "Accept: application/json; indent=4" \
            "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&status=active&device_role=Mirror&tag=${FILENAME}" | jq '.results[] | .name' | grep -v null | sed "s/\"//g"))
              for server in "${SERVERS[@]}"; do
                unset REGION LATITUDE LONGITUDE
                COMMAND=$(curl -sH "Authorization: Token ${{ inputs.netbox }}" -H "Accept: application/json; indent=4" \
                "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&name=$server" | jq)
                # where paths has been altered by mirror
                DL_PATH_DEBS=$(echo $COMMAND | jq '.results[] | .custom_fields["download_path_debs"]' | sed "s/\"//g")
                DL_PATH_IMAGES=$(echo $COMMAND | jq '.results[] | .custom_fields["download_path_images"]' | sed "s/\"//g")
                
                WEIGHT=$(echo $COMMAND | jq '.results[] | .custom_fields["weight"]' | head -1 | sed "s/\"//g")
                SITE_ID=$(echo $COMMAND | jq '.results[] | .site.id' | sed "s/\"//g")
                if [[ $SITE_ID != null ]]; then
                  COMMAND=$(curl -sH "Authorization: Token ${{ inputs.netbox }}" -H "Accept: application/json; indent=4" \
                  "https://stuff.armbian.com/netbox/api/dcim/sites/?limit=500&id=$SITE_ID" | jq)
                  REGION=$(echo $COMMAND | jq '.results[] | .region.name' | sed "s/\"//g")
                  LATITUDE=$(echo $COMMAND | jq '.results[] | .latitude' | sed "s/\"//g")
                  LONGITUDE=$(echo $COMMAND | jq '.results[] | .longitude' | sed "s/\"//g")
                  PHYSICAL=$(echo $COMMAND | jq '.results[] | .physical_address' | sed "s/\"//g")
                  TIME_ZONE=$(echo $COMMAND | jq '.results[] | .time_zone' | sed "s/\"//g")
                  UPLOAD=$(echo $COMMAND | jq '.results[] | .custom_fields["upload_speed"]' | sed "s/\"//g")
                fi
          echo ""  >> dlrouter-${FILENAME}.yaml
          [[ -n $REGION ]] && echo "  # $TIME_ZONE - $UPLOAD Mbit/s" >> dlrouter-${FILENAME}.yaml
          DL_PATH="${FILENAME}"
          [[ "${FILENAME}" == rsync ]] && DL_PATH=""
          [[ "${FILENAME}" == debs ]] && DL_PATH="apt"
          [[ "${FILENAME}" == debs-beta ]] && DL_PATH="beta"
          [[ "${FILENAME}" == images ]] && DL_PATH="dl"
          [[ "$DL_PATH_DEBS" != null && "${FILENAME}" == debs ]] && DL_PATH="${DL_PATH_DEBS}"
          [[ "$DL_PATH_IMAGES" != null && "${FILENAME}" == images ]] && DL_PATH="${DL_PATH_IMAGES}"
          
          echo "  - server: $server/$DL_PATH/" >> "dlrouter-${FILENAME}.yaml"
          [[ "$LATITUDE" != null && -n "$LATITUDE" ]] && echo "    latitude: $LATITUDE" >> dlrouter-${FILENAME}.yaml
          [[ "$LONGITUDE" != null && -n "$LONGITUDE" ]] && echo "    longitude: $LONGITUDE" >> dlrouter-${FILENAME}.yaml
          [[ "$WEIGHT" != null ]] && echo "    weight: $WEIGHT" >> dlrouter-${FILENAME}.yaml          
            done
            cat dlrouter-${FILENAME}.yaml >> $GITHUB_STEP_SUMMARY
            echo "</pre>" >> $GITHUB_STEP_SUMMARY
